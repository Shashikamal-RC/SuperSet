import time
import os
from datetime import datetime
from google.oauth2 import service_account
from googleapiclient.discovery import build
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def log_to_google_sheet(data: dict):
    data = data.__dict__

    # Get the directory where this script is located
    current_dir = os.path.dirname(os.path.abspath(__file__))
    # Get configuration from environment variables
    service_account_filename = os.environ.get('GOOGLE_SERVICE_ACCOUNT_FILE')
    # Create absolute path to the service account file
    SERVICE_ACCOUNT_FILE = os.path.join(current_dir, service_account_filename)
    SPREADSHEET_ID = os.environ.get('GOOGLE_SHEETS_SPREADSHEET_ID')
    RANGE_NAME = os.environ.get('GOOGLE_SHEETS_RANGE_NAME', 'Sheet1!A1')

    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )

    service = build('sheets', 'v4', credentials=credentials)

    # First row for headers if sheet is empty
    headers = [
        "Timestamp", "Posted by", "Role", "Company", "Location", 
        "Min CTC", "Max CTC",  "JD Generated by AI"
    ]
    
    # Check if the sheet is empty and insert headers if needed
    sheet_data = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range=RANGE_NAME
    ).execute()
    
    values = []
    if 'values' not in sheet_data or len(sheet_data['values']) == 0:
        # Sheet is empty, add headers
        values.append(headers)
    
    # Format timestamp
    timestamp = data.get('timestamp')
    if isinstance(timestamp, datetime):
        formatted_timestamp = timestamp.strftime("%Y-%m-%d %H:%M:%S")
    else:
        formatted_timestamp = str(timestamp) if timestamp else time.strftime("%Y-%m-%d %H:%M:%S")
    
    # Add the job data
    values.append([
        formatted_timestamp,
        data.get('Posted by', 'N/A'),
        data.get('Role', data.get('job_title', 'N/A')),  # Fallback to old field name
        data.get('Company', data.get('company_name', 'N/A')),  # Fallback to old field name
        data.get('Location', data.get('location', 'N/A')),
        data.get('Min CTC', data.get('min_salary', 'N/A')),
        data.get('Max CTC', data.get('max_salary', 'N/A')),
        data.get('JD Generated by AI', 'No')
    ])
    
    body = {
        'values': values
    }

    try:
        service.spreadsheets().values().append(
            spreadsheetId=SPREADSHEET_ID,
            range=RANGE_NAME,
            valueInputOption="RAW",
            body=body
        ).execute()

        return True
    except Exception as e:
        print(f"Error logging to Google Sheets: {e}")
        return False


def log_job_data(job_data):
    """
    Convenience function to log data from a JobData object.
    
    Args:
        job_data: A JobData object or dictionary with job information
        
    Returns:
        bool: True if logging was successful, False otherwise
    """
    # Convert JobData to dictionary if it has a to_dict method
    if hasattr(job_data, 'to_dict'):
        data_dict = job_data.to_dict()
    else:
        # Already a dictionary or similar structure
        data_dict = job_data
    
    return log_to_google_sheet(data_dict)


if __name__ == "__main__":
    # Test data for job log
    test_job_data = {
        "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "Posted by": "Test User",
        "Role": "Software Engineer",
        "Company": "Mercedes-Benz R&D",
        "Location": "Bengaluru",
        "Min CTC": "1800000",
        "Max CTC": "2400000",
        "JD Generated by AI": "Yes"
    }
    
    print("Sending test job data to Google Sheets...")
    result = log_to_google_sheet(test_job_data)
    
    if result:
        print("✅ Test data successfully logged to Google Sheets")
    else:
        print("❌ Failed to log test data to Google Sheets")
