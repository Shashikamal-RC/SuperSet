from typing import Optional
from pydantic import BaseModel, Field
from langchain.chat_models import ChatOpenAI
from langchain.output_parsers import PydanticOutputParser
from langchain.prompts import ChatPromptTemplate
from .get_model import OpenAIModel


# Step 1: Define your job details model
class JobDetails(BaseModel):
    company_name: Optional[str] = Field(None, description="Name of the company")
    job_title: str = Field(..., description="Title of the job position")
    location: Optional[str] = Field('', description="Location of the job")
    min_salary: Optional[int] = Field(0, description="Minimum salary/CTC in numerical format (e.g., 100000)")
    max_salary: Optional[int] = Field(0, description="Maximum salary/CTC in numerical format (e.g., 150000)")
    salary_breakup: Optional[str] = Field('', description="Detailed breakdown of salary components including base pay, bonuses, benefits, etc.")
    role_family: str = Field(
        "Product", 
        description="The role family category. Must be one of: 'Business Generalist', 'Product', 'Customer Success', 'Growth & Marketing', 'Category Management', 'Venture Capital', 'B2B Sales & Partnerships'. If none of these categories fit, default to 'Product'."
    )
    job_function: str = Field(
        "Product Management", 
        description="The job function category. Must be one of: 'Sales', 'General Management', 'Marketing - General', or 'Product Management'. If none of these categories fit, default to 'Product Management'."
    )
    job_description: str = Field(
        ..., 
        description="Comprehensive job description including responsibilities, requirements, and qualifications. If not provided in the input text, generate a professional and detailed job description based on the job title and other extracted information."
    )
    is_ai_generated: bool = Field(
        ..., 
        description="Set to False if the job description is extracted from the input text. Set to True if the job description is generated by AI because it wasn't provided in the input."
    )

# Step 2: Setup OpenAI LLM (Make sure OPENAI_API_KEY is set in your environment)
llm = OpenAIModel.get_instance()

# Step 3: Setup parser and prompt
parser = PydanticOutputParser(pydantic_object=JobDetails)

prompt = ChatPromptTemplate.from_messages([
    ("system", """You are an assistant that extracts structured job details from raw input text. 
Pay special attention to salary information which may be in various formats like:
- ₹10 LPA – ₹15 LPA (where LPA means Lakhs Per Annum)
- $80,000-$120,000 per year
- €50,000 to €70,000 annually
- 8-12 lakhs per annum

Always convert salary to numerical format without currency symbols. 
For example, "₹10 LPA" should be extracted as "1000000" (10 lakhs = 1 million).
LPA means Lakhs Per Annum, where 1 lakh = 100,000.

For salary breakup, include all details about compensation structure including:
- Fixed components
- Variable pay
- Performance bonuses
- Benefits
- Stock options
- Other perks

Important: The salary_breakup field must be a string, not a list. If no salary breakdown is found, use an empty string "".

For role_family, analyze the job title and description to categorize it as one of:
- Business Generalist: For general business roles, business analysts, operations, consultants
- Product: For product management, product development, UX/UI roles
- Customer Success: For customer service, customer experience, client management roles
- Growth & Marketing: For growth marketing, digital marketing, brand marketing roles
- Category Management: For category managers, inventory/catalog management roles
- Venture Capital: For VC analysts, investment associates, portfolio management roles
- B2B Sales & Partnerships: For B2B sales, account executives, partnership development roles

If none of these categories clearly fit, default to 'Product'.

For job_function, analyze the job title and description to categorize it as one of: 
- Sales: For positions focused on selling products/services, account management, business development
- General Management: For leadership/executive roles, department heads, operational management
- Marketing - General: For marketing, communications, PR, brand management roles
- Product Management: For product managers, product owners, project managers

If none of these categories clearly fit, default to 'Product Management'.

IMPORTANT: For job_description, when extracting from the input, maintain EXACTLY the original formatting, structure, line breaks, bullet points, and paragraphing. Copy the job description section precisely as it appears in the input text - do not rewrite, summarize, or restructure it. Never replace or modify any bullet points, numbered lists, or special characters used for formatting. Only clean emojis or special Unicode characters by replacing them with appropriate text descriptions while preserving all formatting.

IMPORTANT: If the input contains only basic information (like just a job title, salary, and experience requirements) without a comprehensive job description with responsibilities and qualifications, you MUST set is_ai_generated to True. A proper job description should include multiple paragraphs or bullet points about responsibilities and qualifications - if these are missing, treat it as not having a job description.

When generating a job description, set is_ai_generated to True. When extracting an existing detailed job description from the input, set is_ai_generated to False.

Note: After extraction, the system will automatically format the job description with proper bullet points while preserving the original content."""),
    ("human", """{raw_input}

Please extract the following fields:
- job_title: The title of the job position
- company_name: Name of the company
- location: Location of the job
- min_salary: Minimum salary/CTC in numerical format only (e.g., for ₹10 LPA, extract 1000000)
- max_salary: Maximum salary/CTC in numerical format only (e.g., for ₹15 LPA, extract 1500000)
- salary_breakup: Detailed breakdown of salary components as a string (not a list)
- role_family: Categorize as 'Business Generalist', 'Product', 'Customer Success', 'Growth & Marketing', 'Category Management', 'Venture Capital', or 'B2B Sales & Partnerships' (default to 'Product' if uncertain)
- job_function: Categorize as 'Sales', 'General Management', 'Marketing - General', or 'Product Management' (default to 'Product Management' if uncertain)
- job_description: Extract the COMPLETE job description section EXACTLY as it appears in the input, preserving original formatting, structure, line breaks, and paragraphing. Only clean emojis or special Unicode characters.
- is_ai_generated: Set to true if you generated the job description, false if extracted from input

Respond in JSON format with these fields.""")
])


# Function to format job description with bullet points using the LLM
def format_with_llm(job_description: str, job_title: str = "") -> str:
    """
    Use the LLM to format the job description with proper bullet points
    while preserving the original content and meaning.
    """
    if not job_description:
        return job_description
    
    # Check if the job description already has proper bullet point formatting
    # If it already has bullet points, return it as is to preserve the original formatting
    lines = job_description.split('\n')
    bullet_count = sum(1 for line in lines if line.strip().startswith(('-', '•', '*')))
    
    # If there are already bullet points, preserve the original formatting
    if bullet_count > 0:
        return job_description
    
    # Use the same model instance for consistency
    format_llm = OpenAIModel.get_instance()
    format_prompt = ChatPromptTemplate.from_messages([
        ("system", """You are an expert at formatting job descriptions. Your task is to take a job description 
and format it properly with bullet points for readability, while preserving ALL original content.

Follow these rules:
1. NEVER change the actual content or meaning of the text
2. Identify section headers (like "Key Responsibilities", "Qualifications", etc.)
3. Format all content under each section header as proper bullet points with "- " prefix
4. Leave section headers without bullet points
5. IMPORTANT: Preserve any existing formatting, especially existing bullet points
6. Don't add or remove information - keep exactly the same content
7. Don't summarize or paraphrase the text
8. Maintain original paragraph structure for non-list content
9. If text already has proper formatting or contains any bullet points, don't modify those sections

Examples of sections to format with bullet points:
- Responsibilities/Key Responsibilities 
- Qualifications/Requirements
- Skills
- Experience
- Benefits
- Any subsections under major sections

Return the entire formatted job description with all original content preserved."""),("human", """Here is a job description for {job_title} position that needs formatting:

{job_description}

Please format this job description with proper bullet points where appropriate, while preserving ALL the original content and meaning.""")
    ])
        # Format the job description
    chain = format_prompt | format_llm
    formatted_desc = chain.invoke({"job_title": job_title, "job_description": job_description})
    
    # Extract the content string from the response
    # The model may return a complex object with content attribute or a simple string
    if hasattr(formatted_desc, 'content'):
        return formatted_desc.content
    elif isinstance(formatted_desc, dict) and 'content' in formatted_desc:
        return formatted_desc['content']
    else:
        # If we can't find content, return the original response or convert to string
        return str(formatted_desc) if not isinstance(formatted_desc, str) else formatted_desc

# Optionally: Add a function to generate a job description in the requested format
def generate_structured_job_description(company_name: str, job_title: str) -> str:
    """
    Generates a structured job description based on the company name and job title.
    
    The format follows specific criteria for post-MBA candidates with 2-5 years 
    of experience, using bullet points with hyphens and plain text only.
    """
    # Define generic company description to use when no specific company info is provided
    generic_company_desc = "The company is a rapidly scaling startup based in India, driven by a mission to innovate and disrupt. It's building impactful solutions that address critical challenges and create significant value. The culture champions agility, ownership, and continuous learning, fostering an environment where bold ideas are encouraged, and every team member contributes directly to growth. The company believes in moving fast, embracing change, and celebrating collective success."
    
    # Use company name in generic description if only name is provided
    if company_name and company_name != "The company":
        company_description = f"{company_name} is a rapidly scaling startup based in India, driven by a mission to innovate and disrupt. It's building impactful solutions that address critical challenges and create significant value. The culture champions agility, ownership, and continuous learning, fostering an environment where bold ideas are encouraged, and every team member contributes directly to growth. The company believes in moving fast, embracing change, and celebrating collective success."
    else:
        company_description = generic_company_desc
        company_name = "The company"
    
    return f"""About the Company
{company_description}

Role Overview
The {job_title} will be a key member of the team, contributing strategic insights and driving execution excellence. This role is tailored for post-MBA professionals with 2-5 years of relevant experience, looking to make a significant impact in a fast-paced environment. The ideal candidate will combine strong analytical capabilities with exceptional communication skills to deliver results that advance business objectives.

Key Responsibilities:
- Leads strategic initiatives aligned with business goals and market opportunities
- Analyzes complex data to identify trends, insights, and actionable recommendations
- Collaborates cross-functionally with diverse teams to execute high-impact projects
- Develops and presents compelling proposals and reports to stakeholders
- Identifies optimization opportunities and implements solutions to drive efficiency
- Manages project timelines and resources effectively to ensure on-time delivery
- Stays current with industry trends and best practices to inform decision-making
- Contributes to a culture of innovation and continuous improvement

Qualifications:
- MBA from a reputed institution with 2-5 years of post-MBA professional experience
- Strong strategic thinking and problem-solving capabilities
- Excellent communication and presentation skills, both written and verbal
- Proven track record of driving results in fast-paced environments
- Ability to work autonomously while collaborating effectively with diverse teams
- Strong analytical skills with data-driven decision-making approach
- Adaptability to changing priorities and comfort with ambiguity
- Passion for innovation and creating impactful solutions

{company_name} offers a dynamic work environment where talent is recognized and rewarded. Join us to be part of a mission-driven team where your contributions directly impact our growth trajectory and market success.
"""

# Step 4: Main function
def extract_job_details(raw_input: str) -> dict:
    chain = prompt | llm | parser
    result: JobDetails = chain.invoke({"raw_input": raw_input})

    # Check if input is too minimal (less than 100 characters or fewer than 5 lines)
    if len(raw_input) < 100 or raw_input.count('\n') < 5:
        result.is_ai_generated = True

    if result.is_ai_generated:
        result.job_description = generate_structured_job_description(
            company_name=result.company_name or "The company",
            job_title=result.job_title
        )
    else:
        # Only apply formatting if there are substantive contents to format
        if result.job_description and len(result.job_description) > 50:
            # Check if the job description already has bullet points
            has_bullet_points = any(line.strip().startswith(('-', '•', '*')) 
                                   for line in result.job_description.split('\n'))
            
            # Only format if no bullet points exist
            if not has_bullet_points:
                try:
                    # Use the LLM to format the job description with proper bullet points
                    formatted_description = format_with_llm(
                        job_description=result.job_description,
                        job_title=result.job_title
                    )
                    # Only use the formatted version if it's not empty and not an error message
                    if formatted_description and len(formatted_description) > 50:
                        result.job_description = formatted_description
                except Exception as e:
                    print(f"Error formatting job description: {e}")
                    # If formatting fails, keep the original description
                    pass
    
    return result.dict()
