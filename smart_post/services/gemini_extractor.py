from typing import Optional
from pydantic import BaseModel, Field
from langchain.chat_models import ChatOpenAI
from langchain.output_parsers import PydanticOutputParser
from langchain.prompts import ChatPromptTemplate
from .get_model import OpenAIModel


# Step 1: Define your job details model
class JobDetails(BaseModel):
    company_name: Optional[str] = Field(None, description="Name of the company")
    job_title: str = Field(..., description="Title of the job position")
    location: Optional[str] = Field('', description="Location of the job")
    min_salary: Optional[int] = Field(0, description="Minimum salary/CTC in numerical format (e.g., 100000)")
    max_salary: Optional[int] = Field(0, description="Maximum salary/CTC in numerical format (e.g., 150000)")
    salary_breakup: Optional[str] = Field('', description="Detailed breakdown of salary components including base pay, bonuses, benefits, etc.")
    role_family: str = Field(
        "Product", 
        description="The role family category. Must be one of: 'Business Generalist', 'Product', 'Customer Success', 'Growth & Marketing', 'Category Management', 'Venture Capital', 'B2B Sales & Partnerships'. If none of these categories fit, default to 'Product'."
    )
    job_function: str = Field(
        "Product Management", 
        description="The job function category. Must be one of: 'Sales', 'General Management', 'Marketing - General', or 'Product Management'. If none of these categories fit, default to 'Product Management'."
    )
    job_description: str = Field(
        ..., 
        description="Comprehensive job description including responsibilities, requirements, and qualifications. If not provided in the input text, generate a professional and detailed job description based on the job title and other extracted information."
    )
    is_ai_generated: bool = Field(
        ..., 
        description="Set to False if the job description is extracted from the input text. Set to True if the job description is generated by AI because it wasn't provided in the input."
    )

# Step 2: Setup OpenAI LLM (Make sure OPENAI_API_KEY is set in your environment)
llm = OpenAIModel.get_instance()

# Step 3: Setup parser and prompt
parser = PydanticOutputParser(pydantic_object=JobDetails)

prompt = ChatPromptTemplate.from_messages([
    ("system", """You are an assistant that extracts structured job details from raw input text. 
Pay special attention to salary information which may be in various formats like:
- ₹10 LPA – ₹15 LPA (where LPA means Lakhs Per Annum)
- $80,000-$120,000 per year
- €50,000 to €70,000 annually
- 8-12 lakhs per annum

Always convert salary to numerical format without currency symbols. 
For example, "₹10 LPA" should be extracted as "1000000" (10 lakhs = 1 million).
LPA means Lakhs Per Annum, where 1 lakh = 100,000.

For salary breakup, include all details about compensation structure including:
- Fixed components
- Variable pay
- Performance bonuses
- Benefits
- Stock options
- Other perks

Important: The salary_breakup field must be a string, not a list. If no salary breakdown is found, use an empty string "".

For role_family, analyze the job title and description to categorize it as one of:
- Business Generalist: For general business roles, business analysts, operations, consultants
- Product: For product management, product development, UX/UI roles
- Customer Success: For customer service, customer experience, client management roles
- Growth & Marketing: For growth marketing, digital marketing, brand marketing roles
- Category Management: For category managers, inventory/catalog management roles
- Venture Capital: For VC analysts, investment associates, portfolio management roles
- B2B Sales & Partnerships: For B2B sales, account executives, partnership development roles

If none of these categories clearly fit, default to 'Product'.

For job_function, analyze the job title and description to categorize it as one of: 
- Sales: For positions focused on selling products/services, account management, business development
- General Management: For leadership/executive roles, department heads, operational management
- Marketing - General: For marketing, communications, PR, brand management roles
- Product Management: For product managers, product owners, project managers

If none of these categories clearly fit, default to 'Product Management'.

IMPORTANT: For job_description, when extracting from the input, maintain EXACTLY the original formatting, structure, line breaks, bullet points, and paragraphing. Copy the job description section precisely as it appears in the input text - do not rewrite, summarize, or restructure it. Only clean emojis or special Unicode characters by replacing them with appropriate text descriptions while preserving all formatting.

If a detailed job description is not provided in the input, generate a professional and comprehensive job description based on the job title and other information available. When generating a job description, set is_ai_generated to True. Otherwise, extract the job description from the input and set is_ai_generated to False."""),
    ("human", """{raw_input}

Please extract the following fields:
- job_title: The title of the job position
- company_name: Name of the company
- location: Location of the job
- min_salary: Minimum salary/CTC in numerical format only (e.g., for ₹10 LPA, extract 1000000)
- max_salary: Maximum salary/CTC in numerical format only (e.g., for ₹15 LPA, extract 1500000)
- salary_breakup: Detailed breakdown of salary components as a string (not a list)
- role_family: Categorize as 'Business Generalist', 'Product', 'Customer Success', 'Growth & Marketing', 'Category Management', 'Venture Capital', or 'B2B Sales & Partnerships' (default to 'Product' if uncertain)
- job_function: Categorize as 'Sales', 'General Management', 'Marketing - General', or 'Product Management' (default to 'Product Management' if uncertain)
- job_description: Extract the COMPLETE job description section EXACTLY as it appears in the input, preserving original formatting, structure, line breaks, and paragraphing. Only clean emojis or special Unicode characters.
- is_ai_generated: Set to true if you generated the job description, false if extracted from input

Respond in JSON format with these fields.""")
])


# Optionally: Add a function to generate a job description in the requested format
def generate_structured_job_description(company_name: str, job_title: str) -> str:
    return f"""About the Company
    The company is a fast-growing organization committed to building thoughtful, impactful products that solve real-world problems. With a focus on innovation, collaboration, and user-centric design, the team works to deliver value across every stage of the product lifecycle. The company fosters a culture of curiosity, ownership, and continuous improvement.

    Role Overview
    The {job_title} will be responsible for owning the end-to-end product development process, from ideation to launch. This individual will play a key role in defining product strategy, gathering requirements, collaborating with cross-functional teams, and delivering solutions that meet both user needs and business goals. The role demands strategic thinking, executional excellence, and strong communication skills.

    Key Responsibilities
    - Defines and articulates the product vision, strategy, and roadmap.
    - Works closely with engineering, design, marketing, and business stakeholders to bring products to life.
    - Translates complex user and business needs into clear, actionable product requirements.
    - Prioritizes features and enhancements based on data, impact, and feasibility.
    - Oversees development cycles to ensure timely and high-quality product releases.
    - Continuously gathers feedback and monitors performance to guide iterations and improvements.
    - Conducts market and competitor analysis to inform product decisions and positioning.
    - Acts as the voice of the user throughout the product development process.

    Qualifications
    - Bachelor’s degree in Business, Engineering, Design, or a related field.
    - 1 to 3 years of experience in product management or a closely related discipline.
    - Strong analytical and problem-solving abilities.
    - Excellent communication and interpersonal skills.
    - Proven ability to work in fast-paced, collaborative environments.
    - Familiarity with modern product tools (e.g., Jira, Figma, Notion) is preferred.
    - A user-first mindset with a passion for building meaningful products.

    The company fosters an open, collaborative culture where innovation is encouraged and impact is celebrated. If you're passionate about solving real-world problems through technology, this is the place to be.
    """

# Step 4: Main function
def extract_job_details(raw_input: str) -> dict:
    chain = prompt | llm | parser
    result: JobDetails = chain.invoke({"raw_input": raw_input})

    # Check if input is too minimal (less than 100 characters or fewer than 5 lines)
    if len(raw_input) < 100 or raw_input.count('\n') < 5:
        result.is_ai_generated = True

    if result.is_ai_generated:
        result.job_description = generate_structured_job_description(
            company_name=result.company_name or "The company",
            job_title=result.job_title
        )
    
    return result.dict()
